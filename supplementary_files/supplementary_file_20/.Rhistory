axis.text.y = element_text(size = 12)    # Adjust y-axis tick label size
) +
labs(x = "STs connections (degree)", y = "Count (log scale)")
# Step 5: Close the PDF device
dev.off()
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(viridis)  # Load viridis package for color scales
# Step 1: Read the DataFrame from the CSV file
df <- read.csv("subgraph_sizes.csv")
# Check if the CSV was loaded correctly (optional)
print(head(df))
# Ensure that the dataframe has the correct column name.
# Assuming that the column with the sizes is named "Size".
# If the column is named differently, replace "Size" with the correct column name.
# Step 2: Calculate the count of each subgraph size
df_count <- df %>%
group_by(Size) %>%
summarise(Count = n())
# Display the count DataFrame (optional)
print(df_count)
# Step 3: Open a PDF device to save the plot
pdf(file = "connected_subgraphs_sizes.pdf", width = 12, height = 8)  # Set the filename and dimensions
# Step 4: Generate the scatter plot with a viridis color scale
ggplot(df_count, aes(x = Degree, y = Count, color = Count)) +  # Add color aesthetic mapped to Count
geom_point(size = 5, alpha = 0.7) +  # Adjust point size if needed
scale_color_viridis_c(option = "D") +  # Use viridis color scale
coord_cartesian(clip = "off") +
scale_x_continuous(
limits = c(1, 15),  # Set x-axis limits
breaks = seq(1, 15, by = 1)  # Set x-axis breaks
) +
scale_y_log10(  # Use log scale for y-axis
limits = c(1, 200),  # Set y-axis limits
breaks = c(1, 10, 100, 200)  # Set log-scale y-axis breaks
) +
theme_minimal() +  # Use minimal theme
theme(
legend.position = "none",
axis.title.x = element_text(size = 12),  # Adjust x-axis label size
axis.title.y = element_text(size = 12),  # Adjust y-axis label size
axis.text.x = element_text(size = 12),   # Adjust x-axis tick label size
axis.text.y = element_text(size = 12)    # Adjust y-axis tick label size
) +
labs(x = "STs connections (degree)", y = "Count (log scale)")
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(viridis)
# Step 1: Read the DataFrame from the CSV file
df <- read.csv("ST_degrees.csv")
# Ensure that the dataframe has the correct column name.
# Assuming that the column with the degrees is named "Degree".
# If the column is named differently, replace "Degree" with the correct column name.
# Step 2: Calculate the count of each degree
df_count <- df %>%
group_by(Degree) %>%
summarise(Count = n())
# Determine the range of Degree values
range_degree <- range(df_count$Degree)
# Step 3: Open a PDF device to save the plot
pdf(file = "degree_count.pdf", width = 12, height = 8)  # Set the filename and dimensions
# Step 4: Generate the scatter plot with a custom color scale
# Step 4: Generate the scatter plot with a custom color scale
# Step 4: Generate the scatter plot with a viridis color scale
ggplot(df_count, aes(x = Degree, y = Count, color = Count)) +  # Add color aesthetic mapped to Count
geom_point(size = 5, alpha = 0.7) +  # Adjust point size if needed
scale_color_viridis_c(option = "D") +  # Use viridis color scale
coord_cartesian(clip = "off") +
scale_x_continuous(
limits = c(1, 15),  # Set x-axis limits
breaks = seq(1, 15, by = 1)  # Set x-axis breaks
) +
scale_y_log10(  # Use log scale for y-axis
limits = c(1, 200),  # Set y-axis limits
breaks = c(1, 10, 100, 200)  # Set log-scale y-axis breaks
) +
theme_minimal() +  # Use minimal theme
theme(
legend.position = "none",
axis.title.x = element_text(size = 12),  # Adjust x-axis label size
axis.title.y = element_text(size = 12),  # Adjust y-axis label size
axis.text.x = element_text(size = 12),   # Adjust x-axis tick label size
axis.text.y = element_text(size = 12)    # Adjust y-axis tick label size
) +
labs(x = "STs connections (degree)", y = "Count (log scale)")
# Step 5: Close the PDF device
dev.off()
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(viridis)  # Load viridis package for color scales
# Step 1: Read the DataFrame from the CSV file
df <- read.csv("subgraph_sizes.csv")
# Check if the CSV was loaded correctly (optional)
print(head(df))
# Ensure that the dataframe has the correct column name.
# Assuming that the column with the sizes is named "Size".
# If the column is named differently, replace "Size" with the correct column name.
# Step 2: Calculate the count of each subgraph size
df_count <- df %>%
group_by(Size) %>%
summarise(Count = n())
# Display the count DataFrame (optional)
print(df_count)
# Step 3: Open a PDF device to save the plot
pdf(file = "connected_subgraphs_sizes.pdf", width = 12, height = 8)  # Set the filename and dimensions
# Step 4: Generate the scatter plot with a viridis color scale
ggplot(df_count, aes(x = Degree, y = Count, color = Count)) +  # Add color aesthetic mapped to Count
geom_point(size = 5, alpha = 0.7) +  # Adjust point size if needed
scale_color_viridis_c(option = "D") +  # Use viridis color scale
coord_cartesian(clip = "off") +
scale_x_continuous(
limits = c(1, 15),  # Set x-axis limits
breaks = seq(1, 15, by = 1)  # Set x-axis breaks
) +
scale_y_log10(  # Use log scale for y-axis
limits = c(1, 200),  # Set y-axis limits
breaks = c(1, 10, 100, 200)  # Set log-scale y-axis breaks
) +
theme_minimal() +  # Use minimal theme
theme(
legend.position = "none",
axis.title.x = element_text(size = 12),  # Adjust x-axis label size
axis.title.y = element_text(size = 12),  # Adjust y-axis label size
axis.text.x = element_text(size = 12),   # Adjust x-axis tick label size
axis.text.y = element_text(size = 12)    # Adjust y-axis tick label size
) +
labs(x = "STs connections (degree)", y = "Count (log scale)")
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(viridis)  # Load viridis package for color scales
# Step 1: Read the DataFrame from the CSV file
df <- read.csv("subgraph_sizes.csv")
# Check if the CSV was loaded correctly (optional)
print(head(df))
# Ensure that the dataframe has the correct column name.
# Assuming that the column with the sizes is named "Size".
# If the column is named differently, replace "Size" with the correct column name.
# Step 2: Calculate the count of each subgraph size
df_count <- df %>%
group_by(Size) %>%
summarise(Count = n())
# Display the count DataFrame (optional)
print(df_count)
# Step 3: Open a PDF device to save the plot
pdf(file = "connected_subgraphs_sizes.pdf", width = 12, height = 8)  # Set the filename and dimensions
# Step 4: Generate the scatter plot with viridis color scale
ggplot(df_count, aes(x = Size, y = Count, color = Count)) +  # Add color aesthetic mapped to Count
geom_point(size = 5, alpha=0.5) +  # Adjust point size if needed
scale_color_viridis_c(option = "D") +  # Use viridis color scale
coord_cartesian(clip = "off") +
scale_x_continuous(
limits = c(1, 85),  # Set x-axis limits
breaks = seq(1, 85, by = 10)  # Set x-axis breaks
) +
scale_y_log10(  # Change y-axis to logarithmic scale
limits = c(1, 200),  # Set y-axis limits
breaks = c(1, 10, 100, 200)  # Set log-scale y-axis breaks
) +
theme_minimal() +  # Use minimal theme
theme(
legend.position = "none",
axis.title.x = element_text(size = 12),  # Adjust x-axis label size
axis.title.y = element_text(size = 12),  # Adjust y-axis label size
axis.text.x = element_text(size = 12),   # Adjust x-axis tick label size
axis.text.y = element_text(size = 12)    # Adjust y-axis tick label size
) +
labs(x = "Size of Connected Subgraph", y = "Count (log scale)")
# Step 5: Close the PDF device
dev.off()
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(viridis)  # Load viridis package for color scales
# Step 1: Read the DataFrame from the CSV file
df <- read.csv("subgraph_sizes.csv")
# Check if the CSV was loaded correctly (optional)
print(head(df))
# Ensure that the dataframe has the correct column name.
# Assuming that the column with the sizes is named "Size".
# If the column is named differently, replace "Size" with the correct column name.
# Step 2: Calculate the count of each subgraph size
df_count <- df %>%
group_by(Size) %>%
summarise(Count = n())
# Display the count DataFrame (optional)
print(df_count)
# Step 3: Open a PDF device to save the plot
pdf(file = "connected_subgraphs_sizes.pdf", width = 12, height = 8)  # Set the filename and dimensions
# Step 4: Generate the scatter plot with viridis color scale
ggplot(df_count, aes(x = Size, y = Count, color = Count)) +  # Add color aesthetic mapped to Count
geom_point(size = 5, alpha=0.5) +  # Adjust point size if needed
scale_color_viridis_c(option = "D") +  # Use viridis color scale
coord_cartesian(clip = "off") +
scale_x_continuous(
limits = c(1, 85),  # Set x-axis limits
breaks = seq(1, 85, by = 10)  # Set x-axis breaks
) +
scale_y_log10(  # Change y-axis to logarithmic scale
limits = c(1, 200),  # Set y-axis limits
breaks = c(1, 10, 100, 200)  # Set log-scale y-axis breaks
) +
theme_minimal() +  # Use minimal theme
theme(
legend.position = "none",
axis.title.x = element_text(size = 12),  # Adjust x-axis label size
axis.title.y = element_text(size = 12),  # Adjust y-axis label size
axis.text.x = element_text(size = 12),   # Adjust x-axis tick label size
axis.text.y = element_text(size = 12)    # Adjust y-axis tick label size
) +
labs(x = "Size of Connected Subgraph", y = "Count (log scale)")
# Step 5: Close the PDF device
dev.off()
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(viridis)
# Step 1: Read the DataFrame from the CSV file
df <- read.csv("ST_degrees.csv")
# Ensure that the dataframe has the correct column name.
# Assuming that the column with the degrees is named "Degree".
# If the column is named differently, replace "Degree" with the correct column name.
# Step 2: Calculate the count of each degree
df_count <- df %>%
group_by(Degree) %>%
summarise(Count = n())
# Determine the range of Degree values
range_degree <- range(df_count$Degree)
# Step 3: Open a PDF device to save the plot
pdf(file = "degree_count.pdf", width = 12, height = 8)  # Set the filename and dimensions
# Step 4: Generate the scatter plot with a custom color scale
# Step 4: Generate the scatter plot with a custom color scale
# Step 4: Generate the scatter plot with a viridis color scale
ggplot(df_count, aes(x = Degree, y = Count, color = Count)) +  # Add color aesthetic mapped to Count
geom_point(size = 5, alpha = 0.7) +  # Adjust point size if needed
scale_color_viridis_c(option = "D") +  # Use viridis color scale
coord_cartesian(clip = "off") +
scale_x_continuous(
limits = c(1, 15),  # Set x-axis limits
breaks = seq(1, 15, by = 1)  # Set x-axis breaks
) +
scale_y_log10(  # Use log scale for y-axis
limits = c(1, 200),  # Set y-axis limits
breaks = c(1, 10, 100, 200)  # Set log-scale y-axis breaks
) +
theme_minimal() +  # Use minimal theme
theme(
legend.position = "none",
axis.title.x = element_text(size = 12),  # Adjust x-axis label size
axis.title.y = element_text(size = 12),  # Adjust y-axis label size
axis.text.x = element_text(size = 12),   # Adjust x-axis tick label size
axis.text.y = element_text(size = 12)    # Adjust y-axis tick label size
) +
labs(x = "STs connections (degree)", y = "Count (log scale)")
# Step 5: Close the PDF device
dev.off()
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(viridis)
# Step 1: Read the DataFrame from the CSV file
df <- read.csv("ST_degrees.csv")
# Ensure that the dataframe has the correct column name.
# Assuming that the column with the degrees is named "Degree".
# If the column is named differently, replace "Degree" with the correct column name.
# Step 2: Calculate the count of each degree
df_count <- df %>%
group_by(Degree) %>%
summarise(Count = n())
# Determine the range of Degree values
range_degree <- range(df_count$Degree)
# Step 3: Open a PDF device to save the plot
pdf(file = "degree_count.pdf", width = 12, height = 8)  # Set the filename and dimensions
# Step 4: Generate the scatter plot with a custom color scale
# Step 4: Generate the scatter plot with a custom color scale
# Step 4: Generate the scatter plot with a viridis color scale
ggplot(df_count, aes(x = Degree, y = Count, color = Count)) +  # Add color aesthetic mapped to Count
geom_point(size = 5, alpha = 0.7) +  # Adjust point size if needed
scale_color_viridis_c(option = "D") +  # Use viridis color scale
coord_cartesian(clip = "off") +
scale_x_continuous(
limits = c(0, 15),  # Set x-axis limits
breaks = seq(1, 15, by = 1)  # Set x-axis breaks
) +
scale_y_log10(  # Use log scale for y-axis
limits = c(1, 200),  # Set y-axis limits
breaks = c(1, 10, 100, 200)  # Set log-scale y-axis breaks
) +
theme_minimal() +  # Use minimal theme
theme(
legend.position = "none",
axis.title.x = element_text(size = 12),  # Adjust x-axis label size
axis.title.y = element_text(size = 12),  # Adjust y-axis label size
axis.text.x = element_text(size = 12),   # Adjust x-axis tick label size
axis.text.y = element_text(size = 12)    # Adjust y-axis tick label size
) +
labs(x = "STs connections (degree)", y = "Count (log scale)")
# Step 5: Close the PDF device
dev.off()
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(viridis)
# Step 1: Read the DataFrame from the CSV file
df <- read.csv("ST_degrees.csv")
# Ensure that the dataframe has the correct column name.
# Assuming that the column with the degrees is named "Degree".
# If the column is named differently, replace "Degree" with the correct column name.
# Step 2: Calculate the count of each degree
df_count <- df %>%
group_by(Degree) %>%
summarise(Count = n())
# Determine the range of Degree values
range_degree <- range(df_count$Degree)
# Step 3: Open a PDF device to save the plot
pdf(file = "degree_count.pdf", width = 12, height = 8)  # Set the filename and dimensions
# Step 4: Generate the scatter plot with a custom color scale
# Step 4: Generate the scatter plot with a custom color scale
# Step 4: Generate the scatter plot with a viridis color scale
ggplot(df_count, aes(x = Degree, y = Count, color = Count)) +  # Add color aesthetic mapped to Count
geom_point(size = 5, alpha = 0.7) +  # Adjust point size if needed
scale_color_viridis_c(option = "D") +  # Use viridis color scale
coord_cartesian(clip = "off") +
scale_x_continuous(
limits = c(0, 15),  # Set x-axis limits
breaks = seq(0, 15, by = 1)  # Set x-axis breaks
) +
scale_y_log10(  # Use log scale for y-axis
limits = c(1, 200),  # Set y-axis limits
breaks = c(1, 10, 100, 200)  # Set log-scale y-axis breaks
) +
theme_minimal() +  # Use minimal theme
theme(
legend.position = "none",
axis.title.x = element_text(size = 12),  # Adjust x-axis label size
axis.title.y = element_text(size = 12),  # Adjust y-axis label size
axis.text.x = element_text(size = 12),   # Adjust x-axis tick label size
axis.text.y = element_text(size = 12)    # Adjust y-axis tick label size
) +
labs(x = "STs connections (degree)", y = "Count (log scale)")
# Step 5: Close the PDF device
dev.off()
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(viridis)
# Step 1: Read the DataFrame from the CSV file
df <- read.csv("ST_degrees.csv")
# Ensure that the dataframe has the correct column name.
# Assuming that the column with the degrees is named "Degree".
# If the column is named differently, replace "Degree" with the correct column name.
# Step 2: Calculate the count of each degree
df_count <- df %>%
group_by(Degree) %>%
summarise(Count = n())
# Determine the range of Degree values
range_degree <- range(df_count$Degree)
# Step 3: Open a PDF device to save the plot
pdf(file = "degree_count.pdf", width = 12, height = 8)  # Set the filename and dimensions
# Step 4: Generate the scatter plot with a custom color scale
# Step 4: Generate the scatter plot with a custom color scale
# Step 4: Generate the scatter plot with a viridis color scale
ggplot(df_count, aes(x = Degree, y = Count, color = Count)) +  # Add color aesthetic mapped to Count
geom_point(size = 5, alpha = 0.7) +  # Adjust point size if needed
scale_color_viridis_c(option = "D") +  # Use viridis color scale
coord_cartesian(clip = "off") +
scale_x_continuous(
limits = c(0, 15),  # Set x-axis limits
breaks = seq(0, 15, by = 1)  # Set x-axis breaks
) +
scale_y_log10(  # Use log scale for y-axis
limits = c(1, 350),  # Set y-axis limits
breaks = c(1, 10, 100, 350)  # Set log-scale y-axis breaks
) +
theme_minimal() +  # Use minimal theme
theme(
legend.position = "none",
axis.title.x = element_text(size = 12),  # Adjust x-axis label size
axis.title.y = element_text(size = 12),  # Adjust y-axis label size
axis.text.x = element_text(size = 12),   # Adjust x-axis tick label size
axis.text.y = element_text(size = 12)    # Adjust y-axis tick label size
) +
labs(x = "STs connections (degree)", y = "Count (log scale)")
# Step 5: Close the PDF device
dev.off()
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(viridis)  # Load viridis package for color scales
# Step 1: Read the DataFrame from the CSV file
df <- read.csv("subgraph_sizes.csv")
# Check if the CSV was loaded correctly (optional)
print(head(df))
# Ensure that the dataframe has the correct column name.
# Assuming that the column with the sizes is named "Size".
# If the column is named differently, replace "Size" with the correct column name.
# Step 2: Calculate the count of each subgraph size
df_count <- df %>%
group_by(Size) %>%
summarise(Count = n())
# Display the count DataFrame (optional)
print(df_count)
# Step 3: Open a PDF device to save the plot
pdf(file = "connected_subgraphs_sizes.pdf", width = 12, height = 8)  # Set the filename and dimensions
# Step 4: Generate the scatter plot with viridis color scale
ggplot(df_count, aes(x = Size, y = Count, color = Count)) +  # Add color aesthetic mapped to Count
geom_point(size = 5, alpha=0.5) +  # Adjust point size if needed
scale_color_viridis_c(option = "D") +  # Use viridis color scale
coord_cartesian(clip = "off") +
scale_x_continuous(
limits = c(1, 85),  # Set x-axis limits
breaks = seq(1, 85, by = 10)  # Set x-axis breaks
) +
scale_y_log10(  # Change y-axis to logarithmic scale
limits = c(1, 200),  # Set y-axis limits
breaks = c(1, 10, 100, 200)  # Set log-scale y-axis breaks
) +
theme_minimal() +  # Use minimal theme
theme(
legend.position = "none",
axis.title.x = element_text(size = 12),  # Adjust x-axis label size
axis.title.y = element_text(size = 12),  # Adjust y-axis label size
axis.text.x = element_text(size = 12),   # Adjust x-axis tick label size
axis.text.y = element_text(size = 12)    # Adjust y-axis tick label size
) +
labs(x = "Size of Connected Subgraph", y = "Count (log scale)")
# Step 5: Close the PDF device
dev.off()
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(viridis)
# Step 1: Read the DataFrame from the CSV file
df <- read.csv("ST_degrees.csv")
# Ensure that the dataframe has the correct column name.
# Assuming that the column with the degrees is named "Degree".
# Step 2: Calculate the count of each degree
df_count <- df %>%
group_by(Degree) %>%
summarise(Count = n())
# Step 3: Open a PDF device to save the plot
pdf(file = "degree_count.pdf", width = 12, height = 8)  # Set the filename and dimensions
# Step 4: Generate the scatter plot with a custom color scale
ggplot(df_count, aes(x = Degree, y = Count, color = Count)) +  # Add color aesthetic mapped to Count
geom_point(size = 5, alpha = 0.7) +  # Adjust point size if needed
scale_color_viridis_c(option = "D") +  # Use viridis color scale
coord_cartesian(clip = "off") +
scale_x_log10(  # Use log scale for x-axis
limits = c(1, 15),  # Set x-axis limits
breaks = c(1, 2, 3, 5, 10, 15)  # Set log-scale x-axis breaks
) +
scale_y_log10(  # Use log scale for y-axis
limits = c(1, 350),  # Set y-axis limits
breaks = c(1, 10, 100, 350)  # Set log-scale y-axis breaks
) +
theme_minimal() +  # Use minimal theme
theme(
legend.position = "none",
axis.title.x = element_text(size = 12),  # Adjust x-axis label size
axis.title.y = element_text(size = 12),  # Adjust y-axis label size
axis.text.x = element_text(size = 12),   # Adjust x-axis tick label size
axis.text.y = element_text(size = 12)    # Adjust y-axis tick label size
) +
labs(x = "STs connections (degree, log scale)", y = "Count (log scale)")
# Step 5: Close the PDF device
dev.off()
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(viridis)  # Load viridis package for color scales
# Step 1: Read the DataFrame from the CSV file
df <- read.csv("subgraph_sizes.csv")
# Check if the CSV was loaded correctly (optional)
print(head(df))
# Ensure that the dataframe has the correct column name.
# Assuming that the column with the sizes is named "Size".
# If the column is named differently, replace "Size" with the correct column name.
# Step 2: Calculate the count of each subgraph size
df_count <- df %>%
group_by(Size) %>%
summarise(Count = n())
# Display the count DataFrame (optional)
print(df_count)
# Step 3: Open a PDF device to save the plot
pdf(file = "connected_subgraphs_sizes.pdf", width = 12, height = 8)  # Set the filename and dimensions
# Step 4: Generate the scatter plot with viridis color scale
ggplot(df_count, aes(x = Size, y = Count, color = Count)) +  # Add color aesthetic mapped to Count
geom_point(size = 5, alpha=0.5) +  # Adjust point size if needed
scale_color_viridis_c(option = "D") +  # Use viridis color scale
coord_cartesian(clip = "off") +
scale_x_continuous(
limits = c(1, 85),  # Set x-axis limits
breaks = seq(1, 85, by = 10)  # Set x-axis breaks
) +
scale_y_log10(  # Change y-axis to logarithmic scale
limits = c(1, 200),  # Set y-axis limits
breaks = c(1, 10, 100, 200)  # Set log-scale y-axis breaks
) +
theme_minimal() +  # Use minimal theme
theme(
legend.position = "none",
axis.title.x = element_text(size = 12),  # Adjust x-axis label size
axis.title.y = element_text(size = 12),  # Adjust y-axis label size
axis.text.x = element_text(size = 12),   # Adjust x-axis tick label size
axis.text.y = element_text(size = 12)    # Adjust y-axis tick label size
) +
labs(x = "Size of Connected Subgraph", y = "Count (log scale)")
# Step 5: Close the PDF device
dev.off()
